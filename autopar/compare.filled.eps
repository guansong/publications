%!PS-Adobe-2.0 EPSF-2.0
%%Creator: gnuplot-boxfill.pl
%%CreationDate: Sun Nov  2 22:47:47 2003
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/graymode true def

/BfDict 400 dict def 

/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/PatFreq     [  10.5833 10.0     9.4055  10.5833 10.0     10.5833  10.0    9.375   ] def

/dpi 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def

/screenIndex {
        0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

/CurColors [ 0 0 0 1 0 0 0 1] def

/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSetcmykcolor {
        4 1 roll
        3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
        RealSetrgbcolor pop
} bind def

/tintCMYK {
        1 tintGray sub CurColors 0 4 getinterval aload pop      
        4 index mul 5 1 roll                                                                            
        3 index mul 5 1 roll                                                                            
        2 index mul 5 1 roll                                                                            
        mul 4 1 roll                                                                                            
}bind def
/tintRGB {
        1 tintGray sub CurColors 4 3 getinterval aload pop      
        1 exch sub 3 index mul 1 exch sub 4 1 roll                                      
        1 exch sub 2 index mul 1 exch sub 4 1 roll                                      
        1 exch sub mul 1 exch sub 3 1 roll                                                      
}bind def
/combineColor {
        /tintGray 1 1 CurGray sub CurColors 7 get mul sub def
        graymode not {
                [/Pattern [/DeviceCMYK]] setcolorspace
                tintCMYK CurPat setcolor
        } {
                CurColors 3 get 1.0 ge {
                        tintGray RealSetgray
                } {
                        graymode {
                                tintCMYK
                                RealSetcmykcolor
                        } {
                                tintRGB
                                RealSetrgbcolor
                        } ifelse
                } ifelse
        } ifelse
} bind def

/patProcDict 5 dict dup begin
        <0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke
                                4 -4 moveto 12 4 lineto stroke
                                -4 4 moveto 4 12 lineto stroke} bind def
        <0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke
                                -4 4 moveto 4 -4 lineto stroke
                                4 12 moveto 12 4 lineto stroke} bind def
        <8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
                                -1 -1 moveto 9 9 lineto stroke } bind def
        <03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke
                                4 -4 moveto 12 4 lineto stroke
                                -4 4 moveto 4 12 lineto stroke} bind def
        <8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
                                -4 4 moveto 4 -4 lineto stroke
                                4 12 moveto 12 4 lineto stroke} bind def
end def
/patDict 15 dict dup begin
        /PatternType 1 def              
        /PaintType 2 def                
        /TilingType 3 def               
        /BBox [ 0 0 8 8 ] def   
        /XStep 8 def                    
        /YStep 8 def                    
        /PaintProc {
                begin
                patProcDict bstring known {
                        patProcDict bstring get exec
                } {
                        8 8 true [1 0 0 -1 0 8] bstring imagemask
                } ifelse
                end
        } bind def
end def

/setPatternMode {
        pop pop
        dup patCache exch known {
                patCache exch get
        } { 
                dup
                patDict /bstring 3 -1 roll put
                patDict 
                65 PatFreq screenIndex get div dup matrix scale
                makepattern
                dup 
                patCache 4 -1 roll 3 -1 roll put
        } ifelse
        /CurGray 0 def
        /CurPat exch def
        /graymode false def
        combineColor
} bind def
/setGrayScaleMode {
        graymode not {
                /graymode true def
        } if
        /CurGray exch def
        combineColor
} bind def

BfDict begin [
        /fillvals
] { 0 def } forall

/SetPattern { 
        fillvals exch get
        dup type /stringtype eq
        {8 1 setPatternMode} 
        {setGrayScaleMode}
        ifelse
        } bind def

/InitPattern {
        BfDict begin dup
        array /fillvals exch def
        dict /patCache exch def
        end
        } def
/DefPattern {
        BfDict begin
        fillvals 3 1 roll put
        end
        } def

7 InitPattern
0 <03060c183060c081> DefPattern
1 <8040201008040201> DefPattern
2 <0f1e3c78f0e1c387> DefPattern
3 <0f87c3e1f0783c1e> DefPattern
4 <8142241818244281> DefPattern
5 <111111ff111111ff> DefPattern
6 0 DefPattern
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {gsave 0 setgray
 currentpoint stroke M
  0 vshift R show grestore
} def
/Rshow {gsave 0 setgray
 currentpoint stroke M
  dup stringwidth pop neg vshift R show grestore
} def
/Cshow {gsave 0 setgray
 currentpoint stroke M
  dup stringwidth pop -2 div vshift R show grestore
} def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 SetPattern } def
/LT1 { PL [4 dl 2 dl] 1 SetPattern } def
/LT2 { PL [2 dl 3 dl] 2 SetPattern } def
/LT3 { PL [1 dl 1.5 dl] 3 SetPattern } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 4 SetPattern } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 5 SetPattern } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 6 SetPattern } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 7 SetPattern } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 8 SetPattern } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1350 900 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(0) Rshow
1350 1548 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(0.5) Rshow
1350 2196 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(1) Rshow
1350 2844 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(1.5) Rshow
1350 3492 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(2) Rshow
1350 4140 M
63 0 V
5277 0 R
-63 0 V
-5457 0 R
(2.5) Rshow
1684 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(1) Cshow
2351 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(2) Cshow
3686 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(4) Cshow
5021 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(6) Cshow
6356 900 M
0 63 V
0 3177 R
0 -63 V
0 -3477 R
(8) Cshow
1.000 UL
LTb
1350 900 M
5340 0 V
0 3240 V
-5340 0 V
0 -3240 V
300 2520 M
currentpoint gsave translate 90 rotate 0 0 M
(Time\(sesonds\)) Cshow
grestore
4020 150 M
(Number of processors) Cshow
4020 4590 M
(Execution time difference) Cshow
1.000 UL
LT0
5367 3927 M
(Baseline) Rshow
5547 3927 M
gsave
/redo {0 vpt 1.25 div V 783 0 V 0 vpt 1.75 mul neg V 783 neg 0 V closepath} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
783 0 R
1417 900 M
gsave
/redo{0 2180 V
267 0 V
0 -2180 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
667 0 R
gsave
/redo{0 2193 V
267 0 V
0 -2193 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 2160 V
267 0 V
0 -2160 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 2177 V
267 0 V
0 -2177 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 2192 V
267 0 V
0 -2192 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1.000 UL
LT4
5367 3627 M
(Improved) Rshow
5547 3627 M
gsave
/redo {0 vpt 1.25 div V 783 0 V 0 vpt 1.75 mul neg V 783 neg 0 V closepath} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
783 0 R
1617 900 M
gsave
/redo{0 2004 V
267 0 V
0 -2004 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
668 0 R
gsave
/redo{0 1117 V
267 0 V
0 -1117 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 816 V
267 0 V
0 -816 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 866 V
267 0 V
0 -866 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
1335 0 R
gsave
/redo{0 853 V
267 0 V
0 -853 V
-267 0 V} bind def
currentpoint currentpoint M redo gsave 1 setgray fill grestore M redo fill
grestore
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Roman
